export type IBSheetInstance = IBSheetProperties & IBSheetFunctions;

export interface IBSheetOptions {
  Cfg?: IBSheetProperties;
  Def?: object;
  Cols?: IBCol[];
  LeftCols?: IBCol[];
  RightCols?: IBCol[];
  Head?: any[];
  Foot?: any[];
  Solid?: any[];
  Filter?: any[];
  Events?: IBSheetEvents;
}

interface IBSheetProperties {
  readonly Cols ? : IBCol[];
  readonly Def ? : IBRow[];
  readonly FilterCount ? : number;
  readonly Rows ? : IBRow[];
  readonly SearchCount ? : number;
  readonly Solid ? : IBRow;

  AcceptPivotCols ? : string;
  AcceptPivotData ? : string;
  AcceptPivotRows ? : string;
  AlternateCount ? : number;
  AlternateStart ? : number;
  AlternateType ? : number;
  Alternate ? : number;
  AutoCalendar ? : boolean | number;
  AutoExcelMode ? : number;
  AutoRowHeight ? : boolean | number;
  AutoSelectYm ? : number;
  AutoSelectFirstEnum ? : boolean | number;
  BorderCursors ? : number;
  CalcMergeMode ? : number;
  CalColMove ? : number;
  CalColResize ? : boolean | number;
//   CalcOrder ? : string;
  CanDrag ? : boolean | number;
  CanEdit ? : number;
  CanSelect ? : boolean | number;
  CanSort ? : boolean | number;
  CenterMessage ? : boolean | number;
  ClearFilterOff ? : number;
  ClickPivotFilter ? : boolean | number;
//   ColIndex ? : string;
  ColorState ? : number;
  CopyCols ? : number;
  CopyEdit ? : number;
  CopyPasteHidden ? : number;
  CtrlARange ? : boolean | number;
  CustomScroll ? : number;
  CustomThumbMinSize ? : number;
  DataAutoTrim ? : boolean | number;
  DataMerge ? : number;
  DateStrictMode ? : boolean | number;
  DecimalAdjust ? : string;
  DisableKeyWord ? : boolean | number;
  Down2ExcelConfig ? : IBExcelDownloadConfig;
  Down2TextConfig ? : IBTextDownLoadConfig;
  DragCell ? : boolean | number;
  DragCopy ? : boolean | number;
  DragMerge ? : boolean | number;
  DragObject ? : number;
  EditAutoMerge ? : boolean | number;
  EditErrorsMessageTime ? : number;
  EditMaskFunc ? : object;
  EditSelect ? : number;
  EditArrowBehavior ? : number;
  EnterMode ? : number | object;
  EnumOpenMode ? : boolean | number;
  ExactCheck ? : boolean | number;
  ExcludeMode ? : number;
  Export ? : IBExport;
  //   Expanded ? : string;
  FilterDefaultsIconLeft ? : boolean | number;
  FilterEnumIconLeft ? : boolean | number;
  FilterIgnoreEmpty ? : number;
  FilterValueList ? : number;
  FitWidth ? : boolean | number;
  FixPrevColumnMerge ? : string;
  EditTabMode ? : boolean | number;
  FocusWholeRow ? : boolean | number;
  FocusedCol ? : string;
  FocusedRow ? : string;
  ForceEnterEdit ? : boolean | number;
  FormulaRange ? : boolean | number;
  FormulaRowNoFiltered ? : boolean | number;
  GetByDataFormat ? : boolean | number;
  GetColWithHide ? : boolean | number;
  GroupFormat ? : string;
  GroupMain ? : string;
  GroupSortMain ? : number;
  GroupTree ? : number;
  Group ? : string;
  HeaderCheckMode ? : number;
  HeaderCheck ? : number;
  HeaderMerge ? : number;
  HeaderSortActionMode ? : boolean | number;
  HeaderSortMode ? : number;
  HighlightAfterSort ? : number;
  HoverScope ? : number;
  Hover ? : number;
  IgnoreFocused ? : boolean | number;
  IgnoreHeaderColMerge ? : boolean | number;
  InEditMode ? : number;
  IncludeDelRow ? : number;
  InfoRowConfig ? : IBInfoRowConfig;
  InitPivotCols ? : string;
  InitPivotData ? : string;
  InitPivotRows ? : string;
  // IndexEnum ? : boolean | number;
  // LeftCanResize ? : number;
  LeftWidth ? : number;
  LevelMark ? : string;
  LoadExcelConfig ? : IBExcelLoadConfig;
  LoadTextConfig ? : IBTextLoadConfig;
  // LongClick ? : number;
  MainCol ? : string;
  MarkupTagDelimiter ? : string[];
  MaxPages ? : number;
  MaxSort ? : number;
  MaxVScroll ? : number;
  MemoId ? : string;
  MenuButtons ? : string[];
  MenuHSeparator ? : string;
  MenuMaxHeight ? : number;
  MergeCellsMatch ? : boolean | number;
  MergeHeightAdjust ? : boolean | number;
  MergeVisibleDom ? : boolean | number;
  // MaxWidth ? : boolean | number;
  MessageWidth ? : number;
  MidWidth ? : number;
  MoveDeselectMode ? : boolean | number;
  MoveMessage ? : boolean | number;
  MsgLocale ? : string;
  MultiRecordShape ? : number;
  MultiRecord ? : boolean | number;
  NoDataMessage ? : number;
  NoDataMiddle ? : boolean | number;
  NoFormatEscape ? : boolean | number;
  NoHScroll ? : boolean | number;
  NoPivotSort ? : boolean | number;
  NoRenderHidden ? : boolean | number;
  NoTreeLines ? : boolean | number;
  NoVScroll ? : boolean | number;
  PageLength ? : number;
  PasteCols ? : number;
  PasteFocused ? : number;
  PasteStrictMode ? : boolean | number;
  PivotFormat ? : string;
  PivotFunc ? : string;
  PivotSumPosition ? : boolean | number;
  PrevColumnMergeMode ? : boolean | number;
  PrevColumnMerge ? : number;
  RangeEnumIconLeft ? : boolean | number;
  RemoveCustomFormatDelimiter ? : boolean | number;
  RemoveSepReqValue ? : boolean | number;
  ReqStatusName ? : string;
  RequiredImage ? : string;
  RequiredPosition ? : string;
  // RightCanResize ? : number;
  RightWidth ? : number;
  RowIndex ? : string;
  SaveHTMLChar ? : boolean | number;
  Scale ? : number;
  ScrollLeft ? : number;
  ScrollOverSheet ? : boolean | number;
  ScrollPagingServerSort ? : boolean | number;
  ScrollTop ? : number;
  SearchCaseSensitive ? : boolean | number;
  SearchCells ? : number;
  SearchExpression ? : string;
  SearchMode ? : number;
  SearchProgress ? : boolean | number;
  SectionCanResize ? : number;
  SelFocusColor ? : number;
  SelectingCells ? : number;
  SelectionSummary ? : IBSummary;
  SheetPaste ? : boolean | number;
  ShiftHint ? : boolean | number;
  ShowFilter ? : boolean | number;
  ShowImage ? : boolean | number;
  Size ? : string;
  SortCurrentPage ? : boolean | number;
  SortIconsNum ? : boolean | number;
  SortIcons ? : number;
  SpaceForDefaultValue ? : boolean | number;
  StandardFilter ? : number;
  StandardTip ? : boolean | number;
  StaticCursor ? : boolean | number;
  StorageCompressMode ? : number;
  StorageKeyId ? : string;
  StorageKeyPrefix ? : string;
  StorageSession ? : number;
  StrictParse ? : boolean | number;
  StyleRowConfig ? : IBStyleRowConfig;
  Style ? : string;
  SuppressExportMessage ? : number;
  SuppressMessage ? : number;
  Sync ? : string;
  TabIndex ? : number;
  TabStop ? : number;
  TabletMode ? : boolean | number;
  Timeout ? : number;
  TipStart ? : number;
  TouchScrollCount ? : number;
  TouchScroll ? : number;
  TreeCheckSync ? : number;
  Undo ? : number;
  UnicodeByteMode ? : number | string;
  UseButton ? : number;
  UseCache ? : boolean | number;
  UseExtraObjectData ? : boolean | number;
  UseFilterDialog ? : boolean | number;
  UseGroupSubTotal ? : boolean | number;
  UseHeaderContextMenu ? : boolean | number;
  UseHeaderSortCancel ? : boolean | number;
  UsePivot ? : boolean | number;
  UseRandomId ? : boolean | number | string;
  VScrollPadMode ? : number;
  ValidCheck ? : boolean | number | string;
  ValidateMessage ? : string;
  Weeks ? : number;
  WheelScrollCount ? : number;
  WithCredentials ? : boolean | number;
  XlsImportMode ? : boolean | number;
  ZIndex ? : number;
}

interface IBStyleRowConfig {
  Visible ? : boolean | number;
  StorageType ? : number;
  ServerUrl ? : string;
  AutoLoad ? : boolean | number;
  Themes ? : object;
  Extend ? : boolean | number;
}

interface IBSummary {
  Mode ? : string;
  Align ? : string;
  Width ? : number;
  SumFormat ? : string;
  AvgFormat ? : string;
}

interface IBInfoRowConfig {
  Visible ? : boolean | number;
  Layout ? : string[]| object[];
  ViewCount ? : number;
  ViewFormat ? : string;
  Paging2Count ? : number;
  Space ? : string;
  Format ? : string;
}

interface IBExport {
  Url ? : string;
  Down2ExcelUrl ? : string;
  LoadExcelUrl ? : string;
  DirectLoadExcelUrl ? : string;
  Down2TextUrl ? : string;
  LoadTextUrl ? : string;
  Down2PdfUrl ? : string;
  down2HwpxUrl ? : string;  // 시작 소문자? 확인 필요
  Ext ? : string;
  FilePath ? : string;
}

interface IBExcelDownloadConfig {
  fileName ? : string;
  sheetName ? : string;
  downRows ? : string;
  downCols ? : string;
  downTreeHide ? : boolean | number;
  downHeader ? : boolean | number;
  sheetDesign ? : number;
  titleText ? : string;
  userMerge ? : string;
  excelRowHeight ? : number;
  excelHeaderRowHeight ? : number;
  wordWrap ? : boolean | number;
  comboValidation ? : boolean | number;
  hiddenColumn ? : boolean | number;
  merge ? : number;
  textToGeneral ? : boolean | number;
  allTypeToText ? : boolean | number;
  appendPrevSheet ? : boolean | number;
  checkBoxOnValue ? : string;
  checkBoxOffValue ? : string;
  downSum ? : boolean | number;
  excelFontSize ? : number;
  excludeFooterRow ? : boolean | number;
  numberTypeToText ? : boolean | number;
  reqHeader ? : object;
  extendParam ? : string;
  extendParamMethod ? : string;
  requiredMark ? : boolean | number;
  titleAlign ? : string;
  downCombo ? : string;
  onlyHeaderMerge ? : boolean | number;
  numberExMode ? : boolean | number;
  numberFormatMode ? : number;
  useXhr ? : boolean | number;
  exHead ? : IBExcelDownEx;
  exFoot ? : IBExcelDownEx;
  tempFile ? : string;
  sheetNo ? : number;
  startCol ? : number;
  startRow ? : number;
  freezePane ? : number;
}

interface IBExcelDownEx {
  Height ? : number;
  Cells ? : IBSheetDownExCell[];
}

interface IBSheetDownExCell {
  Type ? : string;
  Value ? : string;
  Align ? : string;
  Color ? : string;
  TextColor ? : string;
  TextSize ? : number;
  TextStyle ? : number;
  TextFont ? : string;
  Wrap ? : boolean | number;
  ColSpan ? : number;
  RowSpan ? : number;
  BorderTop ? : string;
  BorderBottom ? : string;
  BorderLeft ? : string;
  BorderRight ? : string;
}

interface IBTextDownLoadConfig {
  fileName ? : string;
  rowDelim ? : string;
  colDelim ? : string;
  downRows ? : string;
  downCols ? : string;
  downHeader ? : boolean | number;
  downSum ? : boolean | number;
  downTreeHide ? : boolean | number;
  reqHeader ? : object
  downloadEncoding ? : string;
  extendParam ? : string;
  extendParamMethod ? : string;
  useXhr ? : boolean | number;
}

interface IBExcelLoadConfig {
  append ? : boolean | number;
  fileExt ? : string;
  maxFileSize ? : string;
  mode ? : string;
  next ? : IBRow;
  startRow ? : number;
  workSheetName ? : string;
  workSheetNameStrict	? : boolean | number;
  workSheetNo ? : number;
  columnMapping ? : string;
  sendParam ? : object;
  endRow ? : number;
  reqHeader ? : object;
  skipEmptyRow ? : boolean | number;
  workbookPassword ? : number;
  useXhr ? : boolean | number;
}

interface IBTextLoadConfig {
  append ? : boolean | number;
  fileExt ? : string;
  mode ? : string;
  colSeparator ? : string;
  encoding ? : string;
  sendParam ? : object;
  reqHeader ? : object;
  useXhr ? : boolean | number;
}

interface IBRow {
  id ? : string;
  Added ? : number;
  Align ? : string;
  AlternateClass ? : string;
  AlternateColor ? : string;
  ButtonWidth ? : number;
  CalcOrder ? : any;
  CanDrag ? : boolean | number;
  CanEdit ? : number;
  CanFilter ? : number;
  CanFocus ? : number;
  CanFormula ? : boolean | number;
  CanGroup ? : boolean | number;
  CanPrint ? : number;
  CanSelect ? : boolean | number;
  CanSort ? : boolean | number;
  Changed ? : number;
  Class ? : string;
  Color ? : string;
  Deleted ? : number;
  readonly Expanded ? : boolean | number;
  // FocusCell ? : string;
  FocusRow ? : string;
  HaveChild ? : boolean | number;
  Height ? : number;
  readonly Hidden ? : boolean | number;
  HintValue ? : string;
  HtmlPostfix ? : string;
  HtmlPrefix ? : string;
  Indent ? : number;
  readonly Kind ? : string;
  Level ? : number;
  LeftHtml ? : string;
  MaxHeight ? : number;
  Menu ? : string | IBMenu;
  NoCalculate ? : boolean | number;
  NoColor ? : number;
  NoUpload ? : boolean | number;
  RowMerge ? : boolean | number;
  Selected ? : boolean | number;
  ShowHint ? : number;
  ShowIcons ? : number;
  SortPos ? : number;
  readonly Spanned ? : boolean | number;
  TextColor ? : string;
  TextFont ? : string;
  TextSize ? : number;
  TextStyle ? : number;
  TipClass ? : string;
  TipPosition ? : object;
  Tip ? : boolean | number | string;
  VAlign ? : string;
  readonly Visible ? : boolean | number;
  Wrap ? : boolean | number;
}

interface IBCol {
  AcceptEnters ? : number;
  Accept ? : string;
  AddEdit ? : boolean | number;
  Align ? : string;
  AllCheckIgnoreEvent ? : boolean | number;
  AutoCalendar ? : boolean | number;
  BoolGroup ? : number;
  BoolIcon ? : string | number;
  // BoolIconWidth ? : number;
  BreakPoint ? : string;
  ButtonText ? : string;
  // ButtonClass ? : string;
  ButtonWidth ? : number;
  Button ? : string;
  CalendarButtons ? : number;
  CanCopyPaste ? : boolean | number;
  CanDrag ? : boolean | number;
  CanEdit ? : number;
  CanEmpty ? : number;
  CanExport ? : boolean | number;
  CanFilter ? : number;
  CanFocus ? : boolean | number;
  CanGroup ? : boolean | number;
  CanMove ? : boolean | number;
  CanPrint ? : number;
  CanResize ? : boolean | number;
  CanSearch ? : boolean | number;
  CanSelect ? : boolean | number;
  CanSort ? : boolean | number;
  CaseSensitive ? : boolean | number;
  ChangedEdit ? : boolean | number;
  Class ? : string;
  Clear ? : string;
  ColMerge ? : boolean | number;
  Color ? : string;
  Cursor ? : string;
  CustomFormat ? : string;
  DataFormat ? : string;
  DateStrictMode ? : boolean | number;
  DecimalAdjust ? : string;
  DefaultImage ? : string;
  DefaultValue ? : any;
  Defaults ? : string;
  Disabled ? : boolean | number;
  EditEnum ? : string;
  EditFormat ? : string | object;
  EditMask ? : string;
  EmptyValue ? : any;
  EnumDisabled ? : string;
  EnumFormat ? : (() => any);
  EnumKeys ? : string;
  EnumMenu ? : string;
  EnumNoMatchText ? : string;
  EnumStrictMode ? : number;
  Enum ? : string;
  ExcludeEmpty ? : boolean | number;
  Extend ? : object;
  FalseValue ? : string
  FocusCell ? : string;
  FocusRow ? : string;
  FormatFix ? : boolean | number;
  Format ? : string;
  FormulaRow ? : string | (() => any);
  Formula ? : string | (() => any);
  GMT ? : boolean | number;
  GroupChar ? : string;
  GroupDef ? : string;
  GroupDeleted ? : boolean | number;
  GroupEmpty ? : number;
  GroupSingle ? : number;
  GroupSole ? : boolean | number;
  GroupSubTotal ? : IBColGroupSubTotal;
  GroupWidth ? : number;
  HRadio ? : boolean | number;
  HeaderCheck ? : number;
  Header ? : string | object | string[]|object[];
  // Header?: string | IBCol[] | string[];
  HideMobile ? : boolean | number;
  HintValue ? : any;
  HtmlPostfix ? : string;
  HtmlPrefix ? : string;
  IconAlign ? : string;
  IconWidth ? : number;
  Icon ? : string;
  Indent ? : number;
  Interval ? : IBColInterval;
  LinkBase ? : string;
  LinkTarget ? : string;
  Link ? : string;
  MaskColor ? : string;
  MaxChars ? : string;
  MaxWidth ? : number;
  Menu ? : string | IBMenu;
  MinWidth ? : number;
  Name: string;
  NoButtonInFilter ? : boolean | number;
  NoChanged ? : boolean | number;
  NoColor ? : number;
  NoUpload ? : boolean | number;
  NumberSort ? : boolean | number;
  NumberStrictMode ? : boolean | number;
  OrigSearchData ? : boolean | number;
  readonly Pos ? : number;
  RadioIcon ? : number | string;
  RadioUncheck ? : boolean | number;
  Radio ? : number;
  RadioIconWidth ? : number;
  Range ? : boolean | number;
  RawSort ? : number;
  RecordColSpan ? : number;
  RecordHColSpan ? : number;
  RecordHColTitle ? : string;
  RecordRowSpan ? : number;
  RelWidth ? : number;
  Related ? : string;
  // Refresh ? : string;
  Required ? : number;
  ResultMask ? : string;
  ResultMessageTime ? : number;
  ResultMessage ? : string;
  ResultText ? : string;
  Section ? : number;
  SelectCheck ? : boolean | number;
  Selected ? : boolean | number;
  ShowHint ? : number;
  SignFontStyle ? : IBColSignFontStyle;
  SizeIgnoreDecimalSep ? : boolean | number;
  Size ? : number;
  Spanned ? : boolean | number;
  SpinnerMax ? : number;
  SpinnerMin ? : number;
  SpinnerStep ? : number;
  SpinnerVisible ? : boolean | number;
  SuggestDelay ? : number;
  SuggestMin ? : number;
  SuggestType ? : string;
  Suggest ? : string;
  TextColor ? : string;
  TextFont ? : string;
  TextSize ? : string;
  TextStyle ? : number;
  TimePicker ? : boolean | number;
  TipClass ? : string;
  TipPosition ? : object;
  Tip ? : boolean | number | string;
  TrueValue ? : string;
  Type ? : string;
  Uncheck ? : boolean | number;
  UnescapeHTML ? : boolean | number;
  UseFilterDialog ? : boolean | number;
  VAlign ? : string;
  Visible ? : boolean | number;
  WidthPad ? : number;
  Width ? : number;
  Wrap ? : boolean | number;
}

interface IBColSignFontStyle {
  TextColor ? : string;
  TextFont ? : string;
  TextSize ? : string;
  TextStyle ? : string;
}

interface IBColInterval {
  Minute ? : number;
  Second ? : number;
  Init ? : boolean | number;
}

interface IBColGroupSubTotal {
  Type ? : string;
  Color ? : string;
  Format ? : string;
}

/*
interface IBCell {
  Alias ? : string;
  AcceptEnters ? : number;
  Accept ? : string;
  AddClass ? : string;
  Align ? : string;
  AutoCalendar ? : boolean;
  BoolGroup ? : number;
  BoolIcon ? : string | number;
  ButtonText ? : string;
  ButtonWidth ? : number;
  Button ? : string;
  CanEdit ? : number;
  CanFocus ? : boolean | number;
  CanPaste ? : boolean | number;
  CaseSensitive ? : boolean | number;
  Changed ? : boolean | number;
  Checked ? : number;
  Class ? : string;
  Clear ? : string;
  ColMerge ? : boolean | number;
  Color ? : string;
  CopyValue ? : string;
  Cursor ? : string;
  CustomFormat ? : string;
  DataFormat ? : string;
  DateStrictMode ? : boolean | number;
  DecimalAdjust ? : string;
  Disabled ? : boolean | number;
  EditEnum ? : string;
  EditFormat ? : string | object;
  EditMask ? : string;
  EmptyValue ? : string;
  EnumDisabled ? : string;
  EnumKeys ? : string;
  EnumMenu ? : object;
  Enum ? : string;
  Error ? : boolean | number;
  ExportValue ? : string;
  FilterEnumKeys ? : boolean | number;
  FilterValue ? : string;
  FocusCell ? : string;
  FocusRow ? : string;
  Format ? : string;
  GMT ? : boolean | number;
  HintValue ? : string;
  HtmlPostfix ? : string;
  HtmlPrefix ? : string;
  IconAlign ? : string;
  IconWidth ? : number;
  Icon ? : string;
  Indent ? : number;
  LinkBase ? : string;
  LinkTarget ? : string;
  Link ? : string;
  MenuItems ? : string;
  Menu ? : string | object;
  Merge ? : string;
  NoChanged ? : boolean | number;
  NoColor ? : number;
  NumberSort ? : boolean | number;
  NumberStrictMode ? : boolean | number;
  Orig ? : string;
  Path ? : string;
  RadioIconWidth ? : number;
  RadioIcon ? : string | number;
  RadioUncheck ? : boolean | string;
  Radio ? : number;
  RawSort ? : number;
  Related ? : string;
  ResultMask ? : string;
  ResultMessageTime ? : number;
  ResultMessage ? : string;
  ResultText ? : string;
  RowSpan ? : number;
  Selected ? : boolean | number;
  ShowHint ? : number;
  SizeIgnoreDecimalSep ? : boolean | number;
  Size ? : number;
  SortValue ? : string;
  Span ? : number;
  SuggestDelay ? : number;
  SuggestMin ? : number;
  SuggestType ? : string;
  Suggest ? : string;
  TextColor ? : string;
  TextFont ? : string;
  TextSize ? : string;
  TextStyle ? : number;
  TipClass ? : string;
  TipPosition ? : object;
  Tip ? : boolean | number | string;
  Type ? : string;
  Uncheck ? : boolean | number;
  VAlign ? : string;
  Visible ? : boolean | number;
  Wrap ? : boolean | number
}
*/

interface IBSheetFunctions {
  acceptChangedData(row?: IBRow|{row?: IBRow}): void;
  addCol(name: string|{name: string, section?: number, pos?: number, param?: object, visible?: boolean|number, render?: boolean|number}, section?: number, pos?: number, param?: object, visible?: boolean|number, render?: boolean|number): IBCol;
  addFormula(formula: string|(() => any)|{formula: string|(() => any), row?: IBRow|IBRow[], col?: string, attr?: string, render?: boolean|number}, row?: IBRow|IBRow[], col?: string, attr?: string, render?: boolean|number): boolean;
  addRow(next?: IBRow|{next?: IBRow, visible?: boolean|number, focus?: boolean|number, parent?: IBRow, init?: object, render?: boolean|number}, visible?: boolean|number, focus?: boolean|number, parent?: IBRow, init?: object, render?: boolean|number): IBRow;
  addRows(count: number|{count: number, next?: IBRow, focus?: boolean|number, parent?: IBRow, valid?: boolean|number}, next?: IBRow, focus?: boolean|number, parent?: IBRow, valid?: boolean|number): IBRow;
  ajax(url: string|{url: string, params?: string|object, method?: string, callback?: (() => any), sync?: boolean|number, reqHeader?: object, timeout?: number, traditional?: boolean|number}, params?: string|object, method?: string, callback?: (() => any), sync?: boolean|number, reqHeader?: object, timeout?: number, traditional?: boolean|number): void;
  applySaveResult(result: number|{result: number, message?: string, response?: object, files?: any[]}, message?: string, response?: object, files?: any[]): boolean;
  // bind(name: string|{name: string, func: Function}, func?: Function): void;
  // bindAll(func: Function|{func: Function}): void;
  blur(mode?: number|{mode?: number}): boolean;
  calculate(render?: boolean|number|{render?: boolean|number, calconly?: boolean|number, fixedonly?: boolean|number}, calconly?: boolean|number, fixedonly?: boolean|number): void;
  clearCurrentInfo(): boolean;
  clearCurrentStyle(): boolean;
  clearFilter(): void;
  clearPivotFilter(): void;
  clearRange(range: any[]|{range: any[]}): void;
  clearSelection(): void;
  clearSort(): void;
  clear(): void;
  closeDialog(): void;
  copyRow(row?: IBRow|{row?: IBRow, next?: IBRow, empty?: boolean|number, parent?: IBRow, child?: boolean|number, forceVisible?: boolean|number}, next?: IBRow, empty?: boolean|number, parent?: IBRow, child?: boolean|number, forceVisible?: boolean|number): IBRow;
  copyRows(rows?: IBRow[]|{rows?: IBRow[], next?: IBRow, empty?: boolean|number, parent?: IBRow, child?: boolean|number, forceVisible?: boolean|number}, next?: IBRow, empty?: boolean|number, parent?: IBRow, child?: boolean|number, forceVisible?: boolean|number): IBRow[];
  // createPivot(func?: Function|{func?: Function}): void;
  // deleteCol(col: string|{col: string, del?: number, valid?: boolean}, del?: number, valid?: boolean): boolean;
  deleteRow(row: IBRow|{row: IBRow, del?: number, valid?: boolean|number, visible?: boolean|number}, del?: number, valid?: boolean|number, visible?: boolean|number): boolean;
  deleteRows(rows: IBRow[]|{rows: IBRow[], del?: number}, del?: number): boolean;
  disable(hard?: boolean|number|{hard?: boolean|number, fixedInSheet?: boolean|number}, fixedInSheet?: boolean|number): void;
  dispose(): void;
  doFilter(cols: string|{cols: string, vals: string, operators?: string, nofilter?: boolean|number, noclear?: boolean|number}, vals?: string, operators?: string, nofilter?: boolean|number, noclear?: boolean|number): void;
  doGroup(cols: string|{cols: string}): void;
  doPivotFilter(cols: string|{cols: string, vals: string, operators: string}, vals?: string, operators?: string): void;
  doPrint(prefix?: string|{prefix?: string, postfix?: string, pagePrefix?: string, pagePostfix?: string, fitPage?: number, zoomFit?: number, menu?: number, pageOrient?: number, firstPrintHead?: boolean|number}, postfix?: string, pagePrefix?: string, pagePostfix?: string, fitPage?: number, zoomFit?: number, menu?: number, pageOrient?: number, firstPrintHead?: boolean|number): void;
  doSave(url: string|{url: string, param?: string, saveMode?: number, col?: string, urlEncode?: boolean|number, delim?: string, queryMode?: number, reqHeader?: object, quest?: boolean|number, sync?: boolean|number, validRequired?: boolean|number, saveAttr?: string, useLevel?: boolean|number, questCallback?: (() => any), timeout?: number, traditional?: boolean|number, saveExtraAttr?: boolean|number}, param?: string, saveMode?: number, col?: string, urlEncode?: boolean|number, delim?: string, queryMode?: number, reqHeader?: object, quest?: boolean|number, sync?: boolean|number, validRequired?: boolean|number, saveAttr?: string, useLevel?: boolean|number, questCallback?: (() => any), timeout?: number, traditional?: boolean|number, saveExtrAttr?: boolean|number): void;
  doSearchPaging(url: string|{url: string, pageParam?: string, param?: string, reqHeader?: object, method?: string, callback?: (() => any), timeout?: number, sync?: boolean|number, strictParse?: boolean|number, traditional?: boolean|number, restapi?: boolean|number, cPage?: number, pageLengthParam?: string, beforeSend?: (() => any), orderByParam: string}, pageParam?: string, param?: string, reqHeader?: object, method?: string, callback?: (() => any), timeout?: number, sync?: boolean|number, strictParse?: boolean|number, traditional?: boolean|number, restapi?: boolean|number, cPage?: number, pageLengthParam?: string, beforeSend?: (() => any), orderByParam?: string): void;
  doSearch(url: string|{url: string, param?: string, method?: string, append?: boolean|number, reqHeader?: object, callback?: (() => any), timeout?: number, sync?: number, next?: IBRow, strictParse?: boolean|number, traditional?: boolean|number, parent?: IBRow}, param?: string, method?: string, append?: boolean|number, reqHeader?: object, callback?: (() => any), timeout?: number, sync?: boolean|number, next?: IBRow, strictParse?: boolean|number, traditional?: boolean|number, parent?: IBRow): void;
  doSort(sortcols: string|{sortcols: string}): void;
  // enable(): void;
  endEdit(save?: boolean|number|{save?: boolean|number}): any;
  exportDataBuffer(isBuffer: boolean|number|{isBuffer: boolean|number}): void;
  exportData(fileName?: string|{fileName?: string, sheetName?: string, downRows?: string, downCols?: string, downTreeHide?: boolean|number, downHeader?: boolean|number, sheetDesign?: number, titleText?: string, userMerge?: string, excelRowHeight?: number, excelHeaderRowHeight?: number, wordWrap?: boolean|number, comboValidation?: boolean|number, rowDelim?: string, colDelim?: string, hiddenColumn?: boolean|number, merge?: number, textToGeneral?: boolean|number, allTypeToText?: boolean|number, checkBoxOnValue?: string, checkBoxOffValue?: string, downSum?: boolean|number, excelFontSize?: number, excludeFooterRow?: boolean|number, numberTypeToText?: boolean|number, excelFontFamily?: string, exHead?: IBExcelDownEx[], exFoot?: IBExcelDownEx[], appendPrevSheet?: boolean|number, onlyHeaderMerge?: boolean|number, freezePane?: number, numberFormatMode?: number}, sheetName?: string, downRows?: string, downCols?: string, downTreeHide?: boolean, downHeader?: boolean, sheetDesign?: number, titleText?: string, userMerge?: string, excelRowHeight?: number, excelHeaderRowHeight?: number, wordWrap?: boolean, comboValidation?: boolean, rowDelim?: string, colDelim?: string, hiddenColumn?: boolean|number, merge?: number, textToGeneral?: boolean|number, allTypeToText?: boolean|number, checkBoxOnValue?: string, checkBoxOffValue?: string, downSum?: boolean|number, excelFontSize?: number, excludeFooterRow?: boolean|number, numberTypeToText?: boolean|number, excelFontFamily?: string, exHead?: IBExcelDownEx[], exFoot?: IBExcelDownEx[], appendPrevSheet?: boolean|number, onlyHeaderMerge?: boolean|number, freezePane?: number, numberFormatMode?: number): void;
  extractDataText(excludeHideData?: boolean|number|{excludeHideData?: boolean|number}) : string;
  findRows(action: string|{action: string, match?: boolean|number, callback?: (() => any)}, match?: boolean|number, callback?: (() => any)): void;
  findText(col: string|{col: string, searchText: string, startRow?: IBRow, matchMode?: number, caseSensitive?: boolean|number, excludeKeys?: boolean|number}, searchText?: string, startRow?: IBRow, matchMode?: number, caseSensitive?: boolean|number, excludeKeys?: boolean|number): IBRow;
  fitColWidth(ratio?: number[]|{ratio?: number[]}): boolean;
  fitSize(col: string|{col: string, norender?: boolean, rows?: IBRow[]}, norender?: boolean, rows?: IBRow[]): void;
  focus(row: IBRow|{row: IBRow, col: string, pagepos?: number, ignoreEvent?: boolean|number, triggerOnFocus?: boolean|number}, col?: string, pagepos?: number, ignoreEvent?: boolean|number, triggerOnFocus?: boolean|number): boolean;
  getAttribute(row?: IBRow|{row?: IBRow, col?: string, attr?: string}, col?: string, attr?: string): number|string;
  getBodyHeight(): number;
  getBodyWidth(section?: number|{section?: number}): number;
  getCanEdit(row: IBRow|{row: IBRow, col: string}, col?: string): number;
  getCanFocus(row: IBRow|{row: IBRow, col?: string}, col?: string): boolean;
  getCell(row: IBRow|{row: IBRow, col: string}, col?: string): object;
  // getCellStyle(row: IBRow|{row: IBRow, col: string, styleAttr: string}, col?: string, styleAttr?: string): string;
  getChangedData(row?: IBRow|{row?: IBRow, attrs?: string[], dataonly?: boolean|number}, attrs?: string[], dataonly?: boolean|number): string;
  getChildRows(row: IBRow|{row: IBRow, maxLevel?: number}, maxLevel?: number): IBRow[];
  getColByIndex(index: number|{index: number, includeHideCol?: boolean|number}, includeHideCol?: boolean|number): string;
  getColIndex(col: string|{col: string, includeHideCol?: boolean|number}, includeHideCol?: boolean|number): number;
  getColLeft(col: string|{col: string}): number;
  getCols(attr1?: string|{attr1?: string, attr2?: string, seq?: boolean|number}, attr2?: string, seq?: boolean|number): string[];
  getCountInfoElement(): HTMLElement;
  getCurrentInfo(): string;
  getCurrentStyle(): string;
  getDataRows(noSubTotal?: boolean|number|{noSubTotal?: boolean|number}): IBRow[];
  getEditCol(): string;
  getEditRow(): IBRow;
  getEditText(): string;
  getFilter(spec?: boolean|number|{spec?: boolean|number}): object;
  getFirstCol(section?: number|{section?: number, includeHideCol?: boolean|number}, includeHideCol?: boolean|number): string;
  getFirstRow(row?: IBRow|{row?: IBRow}): IBRow;
  getFirstVisibleRow(row?: IBRow|{row?: IBRow}): IBRow;
  // getFixedTop(): number;
  getFocusedCol(): string;
  getFocusedPage(): IBPage;
  getFocusedRow(): IBRow;
  getFormat(row: IBRow|{row: IBRow, col: string, edit?: boolean|number}, col?: string, edit?: boolean|number): string;
  getFormulaRowPosition(): number;
  getGroupRows(): object;
  getHeaderRows(): IBRow[];
  getLastCol(section?: number|{section?: number, includeHideCol?: boolean|number}, includeHideCol?: boolean|number): string;
  getLastPageIndex(): number;
  getLastRow(row?: IBRow|{row?: IBRow}): IBRow;
  getLastVisibleRow(row?: IBRow|{row?: IBRow}): IBRow;
  getLocale(): string;
  getMergeRange(row: IBRow|{row: IBRow, col: string}, col?: string): any[];
  getMessage(key: string|{key: string, type?: string}, type?: string): string;
  getMouseCol(): string;
  getMouseRow(): IBRow;
  getNextCol(col: string|{col: string, includeHideCol?: boolean|number}, includeHideCol?: boolean|number): string;
  getNextRow(row: IBRow|{row: IBRow}): IBRow;
  getNextShift(row: IBRow|{row: IBRow, cnt?: number}, cnt?: number): IBRow;
  getNextSiblingRow(row: IBRow|{row: IBRow}): IBRow;
  getNextSiblingVisibleRow(row: IBRow|{row: IBRow}): IBRow;
  getNextVisibleRow(row: IBRow|{row: IBRow}): IBRow;
  getPageByIndex(index: number|{index: number}): IBPage;
  getPageByRow(row: IBRow|{row: IBRow}): IBPage;
  getPageIndex(page: IBPage|{page: IBPage}): number;
  // getPageIndexByRow(row: IBRow|{row: IBRow}): number;
  getParentRows(row: IBRow|{row: IBRow}): IBRow[];
  getPivotFilterRows(row: IBRow|{row: IBRow, col: string}, col?: string): IBRow[];
  getPrevCol(col: string|{col: string, includeHideCol?: boolean|number}, includeHideCol?: boolean|number): string;
  getPrevRow(row: IBRow|{row: IBRow}): IBRow;
  getPrevShift(row: IBRow|{row: IBRow, cnt?: number}, cnt?: number): IBRow;
  getPrevSiblingRow(row: IBRow|{row: IBRow}): IBRow;
  getPrevSiblingVisibleRow(row: IBRow|{row: IBRow}): IBRow;
  getPrevVisibleRow(row: IBRow|{row: IBRow}): IBRow;
  // getPrintable(func?: Function|{func?: Function}): void;
  getRowById(id: string|{id: string}): IBRow;
  getRowByIndex(index: number|{index: number}): IBRow;
  getRowHeight(row: IBRow|{row: IBRow}): void;
  getRowIndex(row: IBRow|{row: IBRow}): number;
  getRowKind(row: IBRow|{row: IBRow}): string;
  getRowTop(row: IBRow|{row: IBRow}): number;
  getRowValue(row: IBRow|{row: IBRow, saveExtraAttr?: boolean|number, saveAttr?: string}, saveExtraAttr?: boolean|number, saveAttr?: string): object;
  getRowsByChecked(col: string|{col: string}): IBRow[]|boolean;
  getRowsByDup(cols: string|{cols: string, firstOnly?: boolean|number, emptyVal?: boolean|number, subsum?: boolean|number, exceptStatus?: string}, firstOnly?: boolean|number, emptyVal?: boolean|number, subsum?: boolean|number, exceptStatus?: string): IBRow[];
  getRowsByStatus(status: string|{status: string}): IBRow[];
  getRowsFromPage(page: IBPage|{page: IBPage, pos?: number}, pos?: number): IBRow;
  getSaveJson(saveMode?: number|{saveMode?: number, col?: string, validRequired?: boolean|number, showAlert?: boolean|number, saveAttr?: string, useLevel?: boolean|number, formData?: boolean|number, saveExtraAttr?: boolean|number, rows?: IBRow[]}, col?: string, validRequired?: boolean|number, showAlert?: boolean|number, saveAttr?: string, useLevel?: boolean|number, formData?: boolean|number, saveExtraAttr?: boolean|number, rows?: IBRow[]): object[];
  getSaveString(saveMode?: number|{saveMode?: number, col?: string, urlEncode?: boolean|number, delim?: string, queryMode?: number, validRequired?: boolean|number, prefix?: string, showAlert?: boolean|number, saveAttr?: string, saveExtraAttr?: boolean|number}, col?: string, urlEncode?: boolean|number, delim?: string, queryMode?: number, validRequired?: boolean|number, prefix?: string, showAlert?: boolean|number, saveAttr?: string, saveExtraAttr?: boolean|number): string;
  getScale(): number;
  getScrollLeft(section?: number|{section?: number}): number;
  getScrollTop(): number;
  getSelectedRanges(rowtype?: number|{rowtype?: number, coltype?: number}, coltype?: number): object;
  getSelectedRows(type?: number|{type?: number, attr?: string}, attr?: string): any[];
  getSelectionSummaryInfoElement(): HTMLElement;
  getShownCols(section?: number|{section?: number}): string[];
  getShownRows(current?: boolean|number|{current?: boolean|number}): IBRow[];
  // getSpanned(row: IBRow|{row: IBRow, col: string}, col?: string): void;
  getString(row: IBRow|{row: IBRow, col: string}, col?: string): string;
  getSubTotalRows(): object;
  getTotalRowCount(): number;
  getType(row: IBRow|{row: IBRow, col: string}, col?: string): string;
  getUserData(): any[];
  getUserOptions(mode?: number|{mode?: number}): object|null;
  getValue(row: IBRow|{row: IBRow, col: string}, col?: string): number|string;
  goToNextPage(): boolean;
  goToPageByIndex(index: number|{index: number}): void;
  goToPage(page?: IBPage|{page?: IBPage}): void;
  goToPrevPage(): boolean;
  hasChangedData(dataonly?: boolean|number): number;
  hasFilter(): void;
  hideCol(col: string|{col: string, userhidden?: boolean|number, merge?: boolean|number, render?: boolean|number}, userhidden?: boolean|number, merge?: boolean|number, render?: boolean|number): void;
  hideFilterRow(): void;
  hideGroupRow(): boolean;
  hideHint(): void;
  hideMessage(): void;
  hideRow(row: IBRow|{row: IBRow, del?: boolean|number, norender?: boolean|number, nomerge?: boolean|number}, del?: boolean|number, norender?: boolean|number, nomerge?: boolean|number): void;
  hideTip(): void;
  importData(append?: boolean|number|{append?: boolean|number, fileExt?: string, mode?: string, next?: IBRow, startRow?: number, startCol?: number, workSheetName?: string, workSheetNameStrict?: boolean|number, workSheetNo?: number, columnMapping?: string, colSeparator?: string, encoding?: string, endRow?: number, file?: object}, fileExt?: string, mode?: string, next?: IBRow, startRow?: number, startCol?: number, workSheetName?: string, workSheetNameStrict?: boolean|number, workSheetNo?: number, columnMapping?: string, colSeparator?: string, encoding?: string, endRow?: number, file?: object): void;
  // initPopupDialog(opt: IBDialog|{opt: IBDialog, pos: IBPosition, sheet: IBSheetInstance, etcopt?: object}, pos?: IBPosition, sheet?: IBSheetInstance, etcopt?: object): void;
  isFocused(row: IBRow|{row: IBRow, col?: string}, col?: string): boolean;
  loadSearchData(data: any[]|{data: any[], append?: boolean|number, callback?: (() => any), sync?: boolean|number, next?: IBRow, strictParse?: boolean|number, parent?: IBRow, ignoreEvent?: boolean|number}, append?: boolean|number, callback?: (() => any), sync?: boolean|number, next?: IBRow, strictParse?: boolean|number, parent?: IBRow, ignoreEvent?: boolean|number): void;
  makePivotTable(criterias?:object|{criterias?:object, init: object, format?: string, type?: string, callback?: (() => any), hideTotal: object}, init?: object, format?: string, type?: string, callback?: (() => any), hideTotal?: object): void;
  makeSubTotal(subTotalRows: object[]|{subTotalRows: object[], usermerge?: boolean|number, excludeSubTotalRowCount?: boolean|number}, usermerge?: boolean|number, excludeSubTotalRowCount?: boolean|number): void;
  moveCol(col: string|{col: string, tocol: string, right?: boolean|number, norender?: boolean|number}, tocol?: string, right?: boolean|number, norender?: boolean|number): boolean;
  moveRow(row: IBRow|{row: IBRow, next: IBRow, render?: boolean|number, parent?: IBRow, spannedMove?: boolean|number}, next?: IBRow, render?: boolean|number, parent?: IBRow, spannedMove?: boolean|number): boolean;
  // off(name: string|{name: string}): void;
  // offAll(): void;
  // on(name: string|{name: string, func: Function}, func?: Function): void;
  // onAll(func: Function|{func: Function}): void;
  refreshCell(row: IBRow|{row: IBRow, col: string}, col?: string): void;
  refreshPage(page: IBPage|{page: IBPage, always?: boolean|number}, always?: boolean|number): void;
  refreshRow(row: IBRow|{row: IBRow}): void;
  reloadData(func?: (() => any)|{func?: (() => any)}): void;
  reload(callback?: (() => any)|{callback?: (() => any)}): void;
  removeCol(col: string|{col: string, render?: boolean|number}, render?: boolean|number): void;
  removeAll(): void;
  removeMemo(row: IBRow|{row: IBRow, col: string}, col?: string): boolean;
  removePage(page: IBPage|{page: IBPage}): boolean;
  removeRow(row: IBRow|{row: IBRow, nomerge?: boolean|number, norender?: boolean|number}, nomerge?: boolean|number, norender?: boolean|number): void;
  removeRows(row: IBRow[]|{row: IBRow[]}): void;
  removeSubTotal(): void;
  renderBody(): void;
  rerender(scroll?: boolean|number|{scroll?: boolean|number, sync?: boolean|number}, sync?: boolean|number): void;
  revertCell(row: IBRow|{row: IBRow, col: string, render?: boolean|number}, col?: string, render?: boolean|number): void;
  revertData(remainAddRow?: boolean|number|{remainAddRow?: boolean|number, sync?: boolean|number}, sync?: boolean|number): void;
  revertRow(row: IBRow|{row: IBRow, render?: boolean|number}, render?: boolean|number): void;
  saveCurrentInfo(): boolean;
  selectAllRows(select?: boolean|number|{select?: boolean|number, ignoreEvent?: boolean|number}, ignoreEvent?: boolean|number): boolean;
  selectCell(row: IBRow|{row: IBRow, col: string, select?: boolean|number, valid?: boolean|number, ignoreEvent?: boolean|number}, col?: string, select?: boolean|number, valid?: boolean|number, ignoreEvent?: boolean|number): boolean;
  selectCol(col: string|{col: string, select?: boolean|number, valid?: boolean|number, ignoreEvent?: boolean|number}, select?: boolean|number, valid?: boolean|number, ignoreEvent?: boolean|number): boolean;
  selectRange(row1?: IBRow|{row1?: IBRow, col1?: string, row2?: IBRow, col2?: string, select?: boolean|number, type?: number, valid?: boolean|number, ignoreEvent?: boolean|number}, col1?: string, row2?: IBRow, col2?: string, select?: boolean|number, type?: number, valid?: boolean|number, ignoreEvent?: boolean|number): number;
  selectRow(row: IBRow|{row: IBRow, select?: boolean|number, valid?: boolean|number, ignoreEvent?: boolean|number}, select?: boolean|number, valid?: boolean|number, ignoreEvent?: boolean|number): boolean;
  setAllCheck(col: string|{col: string, val: boolean|number, ignoreEvent?: boolean|number}, val?: boolean|number, ignoreEvent?: boolean|number): string;
  setAttribute(row?: IBRow|{row?: IBRow, col?: string, attr: string, val: any, render?: boolean|number}, col?: string, attr?: string, val?: any, render?: boolean|number): void;
  setAutoMergeCancel(mode?: string|{mode?: string}): void;
  setAutoMerge(dataMerge?: number|{dataMerge?: number, headerMerge?: number, prevColumnMerge?: number, fixPrevColumnMerge?: string, headMerge?: number, footMerge?: number, headPrevColumnMerge?: boolean|number, footPrevColumnMerge?: boolean|number}, headerMerge?: number, prevColumnMerge?: number, fixPrevColumnMerge?: string, headMerge?: number, footMerge?: number, headPrevColumnMerge?: boolean|number, footPrevColumnMerge?: boolean|number): void;
  setCellStyle(row?: IBRow|{row?: IBRow, col?: string, styleAttr: object, render?: boolean|number}, col?: string, styleAttr?: object, render?: boolean|number): void;
  setCheck(row: IBRow|{row: IBRow, col: string, val: boolean|number, valid?: boolean|number}, col?: string, val?: boolean|number, valid?: boolean|number): boolean;
  setColWidth(col: string|{col: string, dx?: number}, dx?: number): void;
  setCountInfoElement(element: HTMLElement|string): boolean;
  setCurrentInfo(info: string|{info: string}): boolean;
  setCurrentStyle(info: string|{info: string}): boolean;
  // setDebugger(debugOption: string|{debugOption: string}): string;
  setEditText(value: string|number|{value: string|number}): boolean;
  setEnterMode(enterMode: number|{enterMode: number}): boolean;
  setExpandRow(row: IBRow|{row: IBRow, col?: string, expand?: boolean|number}, col?: string, expand?: boolean|number): boolean;
  setFilter(name: string|{name: string, filter: string|(() => any), render?: boolean|number}, filter?: string|(() => any), render?: boolean|number): any[];
  setFixedBottom(count?: number|{count?: number, render?: boolean|number}, render?: boolean|number): boolean;
  setFixedCols(left?: number|{left?: number, right?: number, reMerge?: boolean|number, sync?: boolean|number}, right?: number, reMerge?: boolean|number, sync?: boolean|number): boolean[];
  setFixedLeft(count?: number|{count?: number, reMerge?: boolean|number, sync?: boolean|number}, reMerge?: boolean|number, sync?: boolean|number): boolean;
  setFixedRight(count?: number|{count?: number, reMerge?: boolean|number, sync?: boolean|number}, reMerge?: boolean|number, sync?: boolean|number): boolean;
  setFixedTop(count?: number|{count?: number, render?: boolean|number}, render?: boolean|number): boolean;
  setFormulaRowPosition(pos: number|{pos: number, norender?: boolean|number}, norender?: boolean|number): boolean;
  setFormulaRow(val: string|object|{val: string|object, cols?: string, visible?: boolean|number, render?: boolean|number}, cols?: string, visible?: boolean|number, render?: boolean|number): boolean;
  setIconCheck(row: IBRow|{row: IBRow, col: string, val?: boolean|number}, col?: string, val?: boolean|number): void;
  setInfoRow(visible?: boolean|number|{visible?: boolean|number, layout?: string[]|object[], viewCount?: number, viewFormat?: string, paging2Count?: number, space?: string, format?: string, render?: boolean|number}, layout?: string[]|object[], viewCount?: number, viewFormat?: string, paging2Count?: number, space?: string, format?: string, render?: boolean|number): void;
  setLocale(code: string|{code: string, load?: boolean|number, path?: string, render?: boolean|number}, load?: boolean|number, path?: string, render?: boolean|number): boolean;
  // setMaxHeight(val?: number|{val?: number}): void;
  setMergeCancel(row: IBRow|{row: IBRow, col: string}, col?: string): void;
  setMergeRange(row1: IBRow|{row1: IBRow, col1: string, row2: IBRow, col2: string}, col1?: string, row2?: IBRow, col2?: string): void;
  // setMergeSubTotal(): void;
  setMessage(key: string|{key: string, type: string, message: string}, type?: string, message?: string): object;
  setRowValue(row: IBRow|{row: IBRow, data: object}, data?: object): void;
  setScale(val?: number|{val?: number, render?: boolean|number}, render?: boolean|number): void;
  setScrollLeft(pos: number|{pos: number, section?: number}, section?: number): boolean;
  setScrollTop(pos: number|{pos: number}): boolean;
  setSelectingCells(mode?: number|{mode?: number}): boolean;
  setSelectionSummaryInfoElement(element: HTMLElement|string|{element: HTMLElement|string, opt?: object}, opt?: object): boolean;
  setSize(size: string|{size: string}): void;
  setString(row: IBRow|{row: IBRow, col: string, val: string, render?: boolean|number}, col?: string, val?: string, render?: boolean|number): void;
  setTheme(prefix: string|{prefix: string, csspath: string, render?: boolean|number}, csspath?: string, render?: boolean|number): void;
  setTotalRowCount(count: number|{count: number}): void;
  setValue(row: IBRow|{row: IBRow, col: string, val: any, render?: boolean|number, ignoreEvent?: object|boolean|number}, col?: string, val?: any, render?: boolean|number, ignoreEvent?: object|boolean|number): boolean;
  showCalendar(row: IBRow|{row: IBRow, col: string, calendar?: IBCalendar, pos?: IBPosition, func?: (() => any), date?: string, always?: boolean|number}, col?: string, calendar?: IBCalendar, pos?: IBPosition, func?: (() => any), date?: string, always?: boolean|number): IBCalendar;
  showCol(col?: string|{col?: string, merge?: boolean|number, render?: boolean|number}, merge?: boolean, render?: boolean|number): void;
  showDialog(row: IBRow|{row: IBRow, col: string, dialog: IBDialog, pos?: IBPosition, always?: boolean|number}, col?: string, dialog?: IBDialog, pos?: IBPosition, always?: boolean|number): IBDialog;
  showFilterDialog(): void;
  showFilterRow(): boolean;
  showFixedRows(fixedobject: object|{fixedobject: object}): boolean;
  showGroupRow(cols?: string|object|{cols?: string|object, format?: string}, format?: string): boolean;
  showHint(row: IBRow|{row: IBRow, col: string, staticMode?: boolean|number}, col?: string, staticMode?: boolean|number): boolean;
  showMemoDialog(row: IBRow|{row: IBRow, col: string}, col?: string): boolean;
  showMenu(row: IBRow|{row: IBRow, col: string, menu: IBMenu, pos?: IBPosition, func?: (() => any), init?: string[], always?: boolean|number, cursor?: boolean|number}, col?: string, menu?: IBMenu, pos?: IBPosition, func?: (() => any), init?: string[], always?: boolean|number, cursor?: boolean|number): IBMenu|null;
  showMessageTime(message: string|{message: string, time?: number, func?: (() => any), buttons?: string[], importance?: number, type?: number}, time?: number, func?: (() => any), buttons?: string[], importance?: number, type?: number): void;
  showMessage(message: string|{message: string, importance?: number, type?: number}, importance?: number, type?: number): void;
  showPopupMenu(menu: IBMenu|{menu: IBMenu, func?: (() => any)}, func?: (() => any)): void;
  showPopupSheet(row?: IBRow|{row?: IBRow, col?: string, data: any[], width?: number, height?: number, dialog?: IBDialog, pos?: IBPosition}, col?: string, data?: any[], width?: number, height?: number, dialog?: IBDialog, pos?: IBPosition): IBMenu|null;
  showProgress(caption: string|{caption: string, text: string, cancel?: string, pos?: number, cnt?: number}, text?: string, cancel?: string, pos?: number, cnt?: number): void;
  showRow(row: IBRow|{row: IBRow, norender?: boolean|number}, norender?: boolean|number): void;
  showTimePicker(row: IBRow|{row: IBRow, col: string, format?: string}, col?: string, format?: string): boolean;
  showTip(tip: string|{tip: string}): void;
  showTreeLevel(level: number|{level: number, ignoreEvent?: boolean|number, childMode?: number}, ignoreEvent?: boolean|number, childMode?: number): void;
  startEdit(row?: IBRow|{row?: IBRow, col?: string, empty?: boolean|number, valid?: boolean|number}, col?: string, empty?: boolean|number, valid?: boolean|number): void;
  switchPivotSheet(pivot?: number|{pivot?: number}): void;
  syncHeaderCheck(): void;
  // unbind(name: string|{name: string}): void;
  // unbindAll(): void;
  updateClientPaging(length: number|{length: number, render?: boolean|number}, render?: boolean|number): boolean;
  updatePageLength(length: number|{length: number, cPage?: number}, cPage?: number): boolean;
  version(): string;
}

interface IBSheetEvents {
  // onAfterCalculate(evtParams:{sheet: IBSheetInstance, show: boolean, row: IBRow, col: string, eventName: string}): void;
  onAfterChange?(evtParams:{sheet: IBSheetInstance, row: IBRow, col: string, val: any, eventName: string}): void;
  onAfterClick?(evtParams:{sheet: IBSheetInstance, row: IBRow, col: string, x: number, y: number, event: Event, canState: string, cellType: string, part: string, partType: string, section: string, kind: string, eventName: string}): void;
  onAfterColAdd?(evtParams:{sheet: IBSheetInstance, col: string, eventName: string}): void;
  onAfterColMove?(evtParams:{sheet: IBSheetInstance, col: string, eventName: string}): void;
  onAfterColResize?(evtParams:{sheet: IBSheetInstance, col: string, row: IBRow, chg: number, eventName: string}): void;
  // onAfterColsAdd(evtParams:{sheet: IBSheetInstance, cols: string[], tocol: string, right: string, empty: string, eventName: string}): boolean;
  onAfterEdit?(evtParams:{sheet: IBSheetInstance, row: IBRow, col: string, val: string, eventName: string}): string;
  onAfterExpand?(evtParams:{sheet: IBSheetInstance, row: IBRow, eventName: string}): void;
  onAfterFilter?(evtParams:{sheet: IBSheetInstance, type: number, eventName: string}): void;
  onAfterGotoPage?(evtParams:{sheet: IBSheetInstance, eventName: string}): boolean;
  onAfterGroup?(evtParams:{sheet: IBSheetInstance, eventName: string}): boolean;
  onAfterPaste?(evtParams:{sheet: IBSheetInstance, eventName: string}): void;
  onAfterPivot?(evtParams:{sheet: IBSheetInstance, pivotSheet: IBSheetInstance, criterias: object, init: object, format: string, type: string, eventName: string}): boolean;
  onAfterChangeProgress?(evtParams:{sheet: IBSheetInstance, messageTag: object, caption: string, text: string, cancel: string, pos: number, cnt: number, rate: number, eventName: string}): void;
  onAfterRowAdd?(evtParams:{sheet: IBSheetInstance, row: IBRow, eventName: string}): void;
  onAfterRowCopy?(evtParams:{sheet: IBSheetInstance, row: IBRow, source: IBRow, empty: boolean, eventName: string}): void;
  onAfterRowDelete?(evtParams:{sheet: IBSheetInstance, row: IBRow, type: number, eventName: string}): void;
  onAfterRowMoveToSheet?(evtParams:{sheet: IBSheetInstance, row: IBRow, tosheet: IBSheetInstance, torow: IBRow, copy: boolean, eventName: string}): number;
  onAfterRowMove?(evtParams:{sheet: IBSheetInstance, row: IBRow, oldparent: IBRow, oldnext: IBRow, eventName: string}): number;
  onAfterSave?(evtParams:{sheet: IBSheetInstance, result: number, message: string, response: object, eventName: string}): void;
  onAfterSectionResize?(evtParams:{sheet: IBSheetInstance, section: number, eventName: string}): void;
  onAfterSort?(evtParams:{sheet: IBSheetInstance, eventName: string}): void;
  // onBeforeCalculate(evtParams:{sheet: IBSheetInstance, show: boolean, row: IBRow, col: string}): boolean;
  onBeforeChange?(evtParams:{sheet: IBSheetInstance, row: IBRow, col: string, val: any, oldval: any, eventName: string}): string;
  onBeforeCheckAll?(evtParams:{sheet: IBSheetInstance, col: string, eventName: string}): void;
  onBeforeColMove?(evtParams:{sheet:IBSheetInstance, col: string, toCol: string, eventName: string}): boolean;
  onBeforeDataLoad?(evtParams:{sheet: IBSheetInstance, result: number, data: any[], message: string, response: object, type: string, eventName: string}): boolean;
  onBeforeExpand?(evtParams:{sheet: IBSheetInstance, row: IBRow, eventName: string}): boolean;
  onBeforeExport?(evtParams:{sheet: IBSheetInstance, type: string, formElem: object, data: object, eventName: string}): boolean;
  onBeforeFileDown?(evtParams:{sheet: IBSheetInstance, row: IBRow, col: string, path: string, value: string, eventName: string}): boolean;
  onBeforeFilter?(evtParams:{sheet: IBSheetInstance, type: number, eventName: string}): boolean;
  onBeforeFocus?(evtParams:{sheet: IBSheetInstance, row: IBRow, col: string, orow: IBRow, ocol: string, rect: any[], orect: any[], eventName: string}): boolean;
  onBeforeGoToPage?(evtParams:{sheet: IBSheetInstance, page: IBPage, pagepos: number, eventName: string}): boolean;
  onBeforeGroup?(evtParams:{sheet: IBSheetInstance, group: string, eventName: string}): boolean;
  onBeforePaste?(evtParams:{sheet: IBSheetInstance, cols: string[], pastedtext: string[], eventName: string}): boolean;
  onBeforeRowDelete?(evtParams:{sheet: IBSheetInstance, row: IBRow, type: number, rows: IBRow[], eventName: string}): boolean;
  onBeforeSave?(evtParams:{sheet: IBSheetInstance, source: object, eventName: string}): boolean;
  // onBeforeSelect(evtParams:{sheet: IBSheetInstance, row: IBRow, deselect: boolean, cols: string[], eventName: string}): boolean;
  // onBeforeSelectAll(evtParams:{sheet: IBSheetInstance, select: number, type: number, eventName: string}): boolean;
  // onBeforeSend(evtParams:{sheet: IBSheetInstance, source: object, data: string, func: Function, eventName: string}): any;
  onBeforeSort?(evtParams:{sheet: IBSheetInstance, col: string, sort: string, eventName: string}): number;
  onBlur?(evtParams:{sheet: IBSheetInstance, orow: IBRow, ocol: string, orect: any[], eventName: string}): void;
  onButtonClick?(evtParams:{sheet: IBSheetInstance, row: IBRow, col: string, x: number, y: number, eventName: string}): boolean;
  // onCalculateCell(evtParams:{sheet: IBSheetInstance, show: boolean, row: IBRow, col: string, val: any}): any;
  onCancelFile?(evtParams:{sheet: IBSheetInstance, row: IBRow, col: string, eventName: string}): void;
  // onCanDrop(evtParams:{sheet: IBSheetInstance, row: IBRow, tosheet: IBSheetInstance, torow: IBRow, type: number, copy: boolean, rows: IBRow[], eventName: string}): boolean;
  onCheckAllFinish?(evtParams:{sheet: IBSheetInstance, col: string, result: boolean, eventName: string}): void;
  onClick?(evtParams:{sheet: IBSheetInstance, row: IBRow, col: string, x: number, y: number, event: Event, canState: string, cellType: string, part: string, partType: string, section: string, kind: string, eventName: string}): void;
  onColResize?(evtParams:{sheet: IBSheetInstance, col: string, eventName: string}): boolean;
  onDataLoad?(evtParams:{sheet: IBSheetInstance, result: number, message: string, response: object, type: string, eventName: string}): void;
  onDblClick?(evtParams:{sheet: IBSheetInstance, row: IBRow, col: string, x: number, y: number, event: Event, canState: string, cellType: string, part: string, partType: string, section: string, kind: string, eventName: string}): boolean;
  OnDragFinish?(evtParams:{sheet: IBSheetInstance, row: IBRow, tosheet: IBSheetInstance, torow: IBRow, eventName: string}): void;
  onEndDragCell?(evtParams:{sheet: IBSheetInstance, row: IBRow, col: string, tosheet: IBSheetInstance, torow: IBRow, tocol: string, x: number, y: number, eventName: string}): number;
  onEndDrag?(evtParams:{sheet: IBSheetInstance, row: IBRow, tosheet: IBSheetInstance, torow: IBRow, type: number, x: number, y: number, copy: boolean, rows: IBRow[], eventName: string}): number;
  onEndEdit?(evtParams:{sheet: IBSheetInstance, row: IBRow, col: string, save: boolean, val: any, raw: string, eventName: string}): any;
  onExcalendar?(evtParams:{sheet: IBSheetInstance, params: object, evType: string, eventName: string}): boolean;
  onExportFinish?(evtParams:{sheet: IBSheetInstance, type: string, result: boolean, eventName: string}): void;
  onFocus?(evtParams:{sheet: IBSheetInstance, row: IBRow, col: string, orow: IBRow, ocol: string, rect: any[], orect: any[], eventName: string}): void;
  onHideMessage?(evtParams:{sheet: IBSheetInstance, eventName: string}): void;
  onIconClick?(evtParams:{sheet: IBSheetInstance, row: IBRow, col: string, x: number, y: number, eventName: string}): boolean;
  onImportFinish?(evtParams:{sheet: IBSheetInstance, type: string, data: any[], result: number, message: string, eventName: string}): void;
  onKeyDown?(evtParams:{sheet: IBSheetInstance, key: number, event: Event, name: string, prefix: string, eventName: string}): boolean;
  onKeyPress?(evtParams:{sheet: IBSheetInstance, key: number, event: Event, name: string, prefix: string, eventName: string}): void;
  onKeyUp?(evtParams:{sheet: IBSheetInstance, key: number, event: Event, name: string, prefix: string, eventName: string}): void;
  onLinkClick?(evtParams:{sheet: IBSheetInstance, row: IBRow, col: string, url: string, target: string, eventName: string}): boolean;
  onLongClick?(evtParams:{sheet: IBSheetInstance, row: IBRow, col: string, x: number, y: number, event: Event, canState: string, cellType: string, part: string, partType: string, section: string, kind: string, eventName: string}): boolean;
  onMouseDown?(evtParams:{sheet: IBSheetInstance, row: IBRow, col: string, x: number, y: number, event: Event, canState: string, cellType: string, part: string, partType: string, section: string, kind: string, eventName: string}): boolean;
  onMouseMove?(evtParams:{sheet: IBSheetInstance, row: IBRow, col: string, x: number, y: number, event: Event, canState: string, cellType: string, part: string, partType: string, section: string, kind: string, eventName: string}): boolean;
  onMouseOver?(evtParams:{sheet: IBSheetInstance, row: IBRow, col: string, orow: IBRow, ocol: string, event: Event, canState: string, cellType: string, part: string, partType: string, section: string, kind: string, ocanState: string, ocellType: string, opart: string, opartType: string, osection: string, okind: string, eventName: string}): void;
  onMouseUp?(evtParams:{sheet: IBSheetInstance, row: IBRow, col: string, x: number, y: number, event: Event, canState: string, cellType: string, part: string, partType: string, section: string, kind: string, eventName: string}): boolean;
  onReadCanEditDate?(evtParams:{sheet: IBSheetInstance, row: IBRow, col: string, date: Date, eventName: string}): boolean|any[];
  // onReadCanEditMY(evtParams:{sheet: IBSheetInstance, row: IBRow, col: string, year: number, month: number, eventName: string}): boolean;
  onReadDate?(evtParams:{sheet: IBSheetInstance, row: IBRow, col: string, date: Date, text: string, classes: any[], range: any[], eventName: string}): string;
  onReadDefaults?(evtParams:{sheet: IBSheetInstance, row: IBRow, col: string, defaults: object, eventName: string}): any;
  onReadFilteringValue?(evtParams:{sheet: IBSheetInstance, row: IBRow, col: string, val: any, eventName: string}): any;
  // onReadEnum(evtParams:{sheet: IBSheetInstance, row: IBRow, col: string, enum: string, eventName: string}): string;
  // onReadEnumKeys(evtParams:{sheet: IBSheetInstance, row: IBRow, col: string, enumkeys: string, eventName: string}): string;
  onReadMenu?(evtParams:{sheet: IBSheetInstance, row: IBRow, col: string, menu: IBMenu, eventName: string}): any;
  onReadSuggest?(evtParams:{sheet: IBSheetInstance, row: IBRow, col: string, suggest: string, eventName: string}): any;
  onReceiveData?(evtParams:{sheet: IBSheetInstance, data: string, response: object, type: string, eventName: string}): string;
  onRenderFinish?(evtParams:{sheet: IBSheetInstance, eventName: string}): void;
  onRenderFirstFinish?(evtParams:{sheet: IBSheetInstance, eventName: string}): void;
  // onRenderPageFinish(evtParams:{sheet: IBSheetInstance, row: IBPage, eventName: string}): void;
  // onRenderPageStart(evtParams:{sheet: IBSheetInstance, row: IBPage, eventName: string}): void;
  onRenderStart?(evtParams:{sheet: IBSheetInstance, eventName: string}): boolean;
  onResize?(evtParams:{sheet: IBSheetInstance, oldwidth: number, oldheight: number, width: number, height: number, eventName: string}): void;
  onResultMask?(evtParams:{sheet: IBSheetInstance, row: IBRow, col: string, val: string, errors: object, eventName: string}): number;
  onRightClick?(evtParams:{sheet: IBSheetInstance, row: IBRow, col: string, x: number, y: number, event: Event, canState: string, cellType: string, part: string, partType: string, section: string, kind: string, eventName: string}): boolean;
  onRightLongClick?(evtParams:{sheet: IBSheetInstance, row: IBRow, col: string, x: number, y: number, event: Event, canState: string, cellType: string, part: string, partType: string, section: string, kind: string, eventName: string}): boolean;
  onRowAdd?(evtParams:{sheet: IBSheetInstance, row: IBRow, eventName: string}): void;
  onRowFilter?(evtParams:{sheet: IBSheetInstance, row: IBRow, show: boolean, eventName: string}): boolean;
  onRowLoad?(evtParams:{sheet: IBSheetInstance, row: IBRow, eventName: string}): boolean;
  onSave?(evtParams:{sheet: IBSheetInstance, eventName: string}): void;
  onScroll?(evtParams:{sheet: IBSheetInstance, hpos: number, vpos: number, oldhpos: number, oldvpos: number, hpos0: number, oldhpos0: number, hpos2: number, oldhpos2: number, eventName: string}): void;
  onSearchFinish?(evtParams:{sheet: IBSheetInstance, type: string, eventName: string}): void;
  onSearchStart?(evtParams:{sheet: IBSheetInstance, type: string, eventName: string}): void;
  onSectionResize?(evtParams:{sheet: IBSheetInstance, section: number, eventName: string}): void;
  onSelectEnd?(evtParams:{sheet: IBSheetInstance, range: object, rows: IBRow[], cols: string[], eventName: string}): void;
  onSelectFile?(evtParams:{sheet: IBSheetInstance, type: string, filename: string, eventName: string}): void;
  onSelectMenu?(evtParams:{sheet: IBSheetInstance, row: IBRow, col: string, result: string, eventName: string}): void;
  onSetFile?(evtParams:{sheet: IBSheetInstance, row: IBRow, col: string, files: any[], eventName: string}): boolean;
  onSheetFocus?(evtParams:{sheet: IBSheetInstance, eventName: string}): void;
  onShowCalendarYm?(evtparams:{sheet: IBSheetInstance, row: IBRow, col: string, year: number, month: number, eventName: string}): boolean;
  onShowCol?(evtParams:{sheet: IBSheetInstance, col: string, hide: boolean, eventName: string}): boolean;
  onShowDefaults?(evtParams:{sheet: IBSheetInstance, row: IBRow, col: string, menu: IBMenu, pos: IBPosition, eventName: string}): void;
  onShowEditEnum?(evtParams:{sheet: IBSheetInstance, row: IBRow, col: string, editenum: string, eventName: string}): string;
  onShowEdit?(evtParams:{sheet: IBSheetInstance, row: IBRow, col: string, val: string, eventName: string}): string;
  onShowEnumMenu?(evtParams:{sheet: IBSheetInstance, row: IBRow, col: string, enummenu: string, eventName: string}): string;
  onShowHint?(evtParams:{sheet: IBSheetInstance, row: IBRow, col: string, hint: object, reason: number, eventName: string}): string;
  onShowMenu?(evtParams:{sheet: IBSheetInstance, row: IBRow, col: string, menu: IBMenu, position: IBPosition, eventName: string}): boolean;
  onShowMessage?(evtParams:{sheet: IBSheetInstance, messageTag: object, message: string, isConfirm: boolean, time: number, buttons: string[], callback: (() => any), eventName: string}): boolean;
  onShowTip?(evtParams:{sheet: IBSheetInstance, row: IBRow, col: string, tip: string, clientX: number, clientY: number, x: number, y: number, eventName: string}): string;
  onStartDragCell?(evtParams:{sheet: IBSheetInstance, row: IBRow, col: string, html: string, eventName: string}): boolean;
  onStartDrag?(evtParams:{sheet: IBSheetInstance, row: IBRow, col: string, more: boolean, copy: boolean, rows: IBRow[], eventName: string}): boolean;
  onStartEdit?(evtParams:{sheet: IBSheetInstance, row: IBRow, col: string, eventName: string}): boolean;
  onSuggest?(evtParams:{sheet: IBSheetInstance, row: IBRow, col: string, val: string, suggest: string, eventName: string}): any;
  onVScrollEndPoint?(evtParams:{sheet: IBSheetInstance, vpos: number, oldvpos: number, eventName: string}): void;
  onValidation?(evtParams:{sheet: IBSheetInstance, row: IBRow, col: string, eventName: string}): void;
}

interface IBMenu {
  OnButton ? (button: string) : boolean | number;
  OnSave ? (Item: IBMenuItem, Data: string) : boolean | number;
  Buttons ? : string[];
  CollapseOther ? : boolean | number;
  Default ? : IBMenuItem;
  ExpandTime ? : number;
  Items ? : IBMenuItem[];
  SaveType ? : number;
  ShowHint ? : boolean | number;
}

interface IBMenuItem {
  OnChanged ? (Value: string) : string;
  OnClick ? () : boolean | number;
  Bool ? : number;
  Caption ? : boolean | number;
  CheckAll ? : boolean | number;
  ColumnSizes ? : string;
  Columns ? : number;
  Default ? : IBMenuItem;
  Disabled ? : boolean | number;
  Edit ? : boolean | number;
  Enum ? : boolean | number;
  Expanded ? : number;
  Group ? : number;
  GroupAll ? : number;
  Height ? : number;
  Hidden ? : number;
  Icon ? : string;
  IconWidth ? : number;
  Items ? : IBMenuItem[];
  Left ? : boolean | number;
  LeftHtml ? : string;
  LeftWidth ? : number;
  Level ? : boolean | number;
  Menu ? : boolean | number;
  Name ? : string;
  NoAll ? : boolean | number;
  RightHtml ? : string;
  RightWidth ? : number;
  Text ? : string;
  Uncheck ? : boolean | number;
  Value ? : boolean | number | string;
  Width ? : number;
}

interface IBPosition {
  Align ? : string;
  Height ? : number;
  Mouse ? : boolean | number;
  Move ? : boolean | number;
  Realign ? : boolean | number;
  Resize ? : boolean | number;
  Tag ? : any;
  Width ? : number;
  X ? : number;
  Y ? : number;
}

interface IBPage {
  Level ? : number;
  LevelImg ? : number;
  Name ? : string;
  Page ? : number;
  State ? : number;
  childNodes ? : object;
  firstChild ? : object;
  lastChild ? : object;
  nextSibling ? : object;
  nodeName ? : string;
  parentNode ? : object;
  previousSibling ? : object;
  tagName ? : string;
}

interface IBDialog {
  Close ? () : void;
  Area ? : any;
  Body ? : string;
  CanFocus ? : boolean | number;
  CloseAfter ? : boolean | number;
  CloseClick ? : boolean | number;
  CloseClickHeader ? : boolean | number;
  CloseOut ? : boolean | number;
  CloseTimeout ? : number;
  Foot ? : string;
  Head ? : string;
  HeadClose ? : boolean | number;
  Header ? : string;
  MaxHeight ? : number;
  MaxWidth ? : number;
  MinHeight ? : number;
  MinWidth ? : number;
  Modal ? : boolean | number;
  Position ? : IBPosition;
  Shadow ? : boolean | number;
  ShadowHeader ? : boolean | number;
  Tag ? : any;
  Wrap ? : number;
}

interface IBCalendar {
  Close ? () : void;
  OnButtonClick ? (button: number) : number;
  OnCanEditDate ? (date: Date) : boolean | number;
  onReadCanEditYM ? (year: number, month: number) : boolean | number;
  OnChange ? (date: any) : boolean | number;
  OnGetCalendarDate ? (date: Date, text: string, classes: string[], range: boolean | number) : string;
  OnSave ? (date: any) : boolean | number;
  Buttons ? : number;
  Buttons2 ? : number;
  Date ? : any;
  Range ? : boolean | number;
  ReadOnly ? : boolean | number;
  RowsNext ? : number;
  RowsPrev ? : number;
  Texts ? : any;
  TimeFormat ? : string;
  Weeks ? : number;
  Modal ? : boolean;
}
